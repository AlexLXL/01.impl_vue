{"version":3,"file":"vue.js","sources":["../../src/utils.js","../../src/observe/index.js","../../src/state.js","../../src/init.js","../../src/index.js"],"sourcesContent":["export function isFunction(val) {\r\n    return typeof val === \"function\";\r\n}\r\n\r\nexport function isObject(val) {\r\n    return typeof val === \"object\" && val !== null;\r\n}\r\n\r\nexport function isArray(val) {\r\n    return Array.isArray(val);\r\n}","import {isObject} from \"../utils\";\r\n\r\nexport function observe(value) {\r\n    if (!isObject(value)) return;\r\n\r\n    return new Observer(value);\r\n}\r\n\r\nclass Observer {\r\n    constructor(value) {\r\n        this.walk(value);\r\n    }\r\n\r\n    walk(data) {\r\n        Object.keys(data).forEach((key) => {\r\n            defineReactive(data, key, data[key]);\r\n        })\r\n    }\r\n}\r\n\r\nfunction defineReactive(obj, key, value) {\r\n    observe(value); // 递归监控value\r\n\r\n    Object.defineProperty(obj, key, {\r\n        get() {\r\n            return value\r\n        },\r\n        set(newValue) {\r\n            if (newValue === oldValue) return;\r\n            value = newValue;\r\n        }\r\n    })\r\n}","import {isFunction} from \"./utils\";\r\nimport {observe} from \"./observe/index.js\";\r\n\r\nexport function initState(vm) {\r\n    const opts = vm.$options;\r\n    \r\n    if (opts.data) {\r\n        initData(vm)\r\n    }\r\n}\r\n\r\nfunction initData(vm) {\r\n    let data = vm.$options.data;\r\n    data = isFunction(data) ? data.call(vm) : data;\r\n    observe(data);\r\n    \r\n    console.log(data);\r\n}","import {initState} from \"./state\";\r\n\r\nexport function initMixin(Vue) {\r\n    Vue.prototype._init = function (options) {\r\n        const vm = this;\r\n        vm.$options = options;\r\n\r\n        initState(vm);\r\n\r\n        if (vm.$options.el) {\r\n            // --snip-- 挂载\r\n        }\r\n    }\r\n}","import {initMixin} from \"./init\";\r\n\r\nfunction Vue(option) {\r\n    this._init(option);\r\n}\r\n\r\ninitMixin(Vue);\r\n\r\nexport default Vue;\r\n\r\n"],"names":["isFunction","val","isObject","observe","value","Observer","constructor","walk","data","Object","keys","forEach","key","defineReactive","obj","defineProperty","get","set","newValue","oldValue","initState","vm","opts","$options","initData","call","console","log","initMixin","Vue","prototype","_init","options","el","option"],"mappings":";;;;;;IAAO,SAASA,UAAT,CAAoBC,GAApB,EAAyB;IAC5B,SAAO,OAAOA,GAAP,KAAe,UAAtB;IACH;IAEM,SAASC,QAAT,CAAkBD,GAAlB,EAAuB;IAC1B,SAAO,OAAOA,GAAP,KAAe,QAAf,IAA2BA,GAAG,KAAK,IAA1C;IACH;;ICJM,SAASE,OAAT,CAAiBC,KAAjB,EAAwB;IAC3B,MAAI,CAACF,QAAQ,CAACE,KAAD,CAAb,EAAsB;IAEtB,SAAO,IAAIC,QAAJ,CAAaD,KAAb,CAAP;IACH;;IAED,MAAMC,QAAN,CAAe;IACXC,EAAAA,WAAW,CAACF,KAAD,EAAQ;IACf,SAAKG,IAAL,CAAUH,KAAV;IACH;;IAEDG,EAAAA,IAAI,CAACC,IAAD,EAAO;IACPC,IAAAA,MAAM,CAACC,IAAP,CAAYF,IAAZ,EAAkBG,OAAlB,CAA2BC,GAAD,IAAS;IAC/BC,MAAAA,cAAc,CAACL,IAAD,EAAOI,GAAP,EAAYJ,IAAI,CAACI,GAAD,CAAhB,CAAd;IACH,KAFD;IAGH;;IATU;;IAYf,SAASC,cAAT,CAAwBC,GAAxB,EAA6BF,GAA7B,EAAkCR,KAAlC,EAAyC;IACrCD,EAAAA,OAAO,CAACC,KAAD,CAAP,CADqC;;IAGrCK,EAAAA,MAAM,CAACM,cAAP,CAAsBD,GAAtB,EAA2BF,GAA3B,EAAgC;IAC5BI,IAAAA,GAAG,GAAG;IACF,aAAOZ,KAAP;IACH,KAH2B;;IAI5Ba,IAAAA,GAAG,CAACC,QAAD,EAAW;IACV,UAAIA,QAAQ,KAAKC,QAAjB,EAA2B;IAC3Bf,MAAAA,KAAK,GAAGc,QAAR;IACH;;IAP2B,GAAhC;IASH;;IC7BM,SAASE,SAAT,CAAmBC,EAAnB,EAAuB;IAC1B,QAAMC,IAAI,GAAGD,EAAE,CAACE,QAAhB;;IAEA,MAAID,IAAI,CAACd,IAAT,EAAe;IACXgB,IAAAA,QAAQ,CAACH,EAAD,CAAR;IACH;IACJ;;IAED,SAASG,QAAT,CAAkBH,EAAlB,EAAsB;IAClB,MAAIb,IAAI,GAAGa,EAAE,CAACE,QAAH,CAAYf,IAAvB;IACAA,EAAAA,IAAI,GAAGR,UAAU,CAACQ,IAAD,CAAV,GAAmBA,IAAI,CAACiB,IAAL,CAAUJ,EAAV,CAAnB,GAAmCb,IAA1C;IACAL,EAAAA,OAAO,CAACK,IAAD,CAAP;IAEAkB,EAAAA,OAAO,CAACC,GAAR,CAAYnB,IAAZ;IACH;;ICfM,SAASoB,SAAT,CAAmBC,GAAnB,EAAwB;IAC3BA,EAAAA,GAAG,CAACC,SAAJ,CAAcC,KAAd,GAAsB,UAAUC,OAAV,EAAmB;IACrC,UAAMX,EAAE,GAAG,IAAX;IACAA,IAAAA,EAAE,CAACE,QAAH,GAAcS,OAAd;IAEAZ,IAAAA,SAAS,CAACC,EAAD,CAAT;;IAEA,QAAIA,EAAE,CAACE,QAAH,CAAYU,EAAhB,EAAoB;IAGvB,GATD;IAUH;;ICXD,SAASJ,GAAT,CAAaK,MAAb,EAAqB;IACjB,OAAKH,KAAL,CAAWG,MAAX;IACH;;IAEDN,SAAS,CAACC,GAAD,CAAT;;;;;;;;"}